name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'app.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'k8s/**'
      - 'tests/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'app.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'k8s/**'
      - 'tests/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v
        
    - name: Test application
      run: |
        python app.py &
        sleep 5
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ || exit 1
        
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          kousthubsarma/hello-flask:latest
          kousthubsarma/hello-flask:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  notify:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.build-and-push.result == 'success'
      run: |
        echo "üéâ CI/CD Pipeline completed successfully!"
        echo "‚úÖ Tests passed"
        echo "‚úÖ Docker image built and pushed"
        echo "üìù Next step: Run 'kubectl rollout restart -n demo deploy/hello-flask' to deploy the new image"
        
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.build-and-push.result == 'failure'
      run: |
        echo "‚ùå CI/CD Pipeline failed!"
        echo "Test result: ${{ needs.test.result }}"
        echo "Build result: ${{ needs.build-and-push.result }}"
